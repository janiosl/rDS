source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
by_age
ggplot(by_age,
aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
View(by_age)
ggplot(by_age,
aes(age, prop, color = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(color = "marital")
by_age <- gss_cat %>%
filter(!is.na(age))
gss_cat %>%
filter(!is.na(age))
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count()
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
by_age
sum(by_age$n)
by_age[]
by_age[1,]
by_age[1,]$n
by_age[1,]$n/sum(by_age$n)
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n/sum(n))
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar()
##=====================================
##Modificar níveis
##=====================================
gss_cat %>% count(partyid)
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind, near rep",
"Independent, near dem" = "Ind, near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat"
)) %>%
count(partyid)
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat"
)) %>%
count(partyid)
#Recombinar grupos de níveis
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "Not answer",
"Other" = "Don't know",
"Other" = "Other party"
)) %>%
count(partyid)
#Recombinar grupos de níveis
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "No answer",
"Other" = "Don't know",
"Other" = "Other party"
)) %>%
count(partyid)
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
))
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
))
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
))
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
)) %>%
count(partyid)
#Agrupar todos os níveis pequenos
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
#Agrupar sem "excesso" definindo quantidade de grupos
gss_cat %>%
mutate(relig = fct_lump(relig, n = 5)) %>% #n define grupos
count(relig, sort = TRUE) %>% #sort ordena o resultado
print(n = Inf) #Inf permite visualizar todos os grupos do resultado
#Agrupar sem "excesso" definindo quantidade de grupos
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>% #n define grupos
count(relig, sort = TRUE) %>% #sort ordena o resultado
print(n = Inf) #Inf permite visualizar todos os grupos do resultado
#Agrupar sem "excesso" definindo quantidade de grupos
gss_cat %>%
mutate(relig = fct_lump(relig, n = 3)) %>% #n define grupos
count(relig, sort = TRUE) %>% #sort ordena o resultado
print(n = Inf) #Inf permite visualizar todos os grupos do resultado
install.packages("lubridate")
#install.packages("lubridate")
library(tidyverse)
library(lubridate)
library(nycflights13)
#Verificando tempos
today()
now() #Data e hora
#Lendo datas a partir de strings
ymd("2017-01-31")
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_lubridate.R", echo=TRUE)
mdy("January 31st, 2017")
dmy("31-Jan-2017")
#Lendo datas a partir de números
ymd(20170131)
#Datas e horas
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
ymd(20170131, tz="UTC")
flights %>%
select(year, month, day, hour, minute)
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_date(year, month, day))
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_lubridate.R", echo=TRUE)
View(flights)
flights[,1]
flights[1,1]
flights[1,4]
flights[1:5,4]
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
#Aplicação da função
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_date_time_100(year, month, day, dep_time),
arr_time = make_date_time_100(year, month, day, arr_time),
sched_dep_time = make_date_time_100(year, month, day, sched_dep_time),
sched_arr_time = make_date_time_100(year, month, day, sched_arr_time),
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
#Aplicação da função
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time),
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
547 %/% 2
547 /2
547 / 100
547 %/% 100
547 %% 100
547 %% 2
#Visualização dos dados de datas e horas
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400)
#Visão de um dia
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600)
flights_dt %>%
filter(dep_time == ymd(20130131)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600)
flights_dt %>%
filter(dep_time == ymd(20130513)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600)
flights_dt %>%
filter(dep_time < ymd(20130513)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600)
flights_dt %>%
filter(dep_time == ymd(20130513)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600)
#Mudar de um tipo para outro
today()
as_datetime(today())
now()
as_date(now())
as_datetime(60*60*10)
as_date(365*10+2)
ymd(c|("2010-10-10"))
ymd(c("2010-10-10"))
ymd(c("2010-10-10", "bananas"))
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_lubridate.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_lubridate.R", echo=TRUE)
flights_dt %>%
filter(dep_time == ymd(20130501))
filter(dep_time < ymd(20130501))
flights_dt %>%
filter(dep_time < ymd(20130501))
flights_dt %>%
filter(dep_time == ymd(20130101))
flights_dt %>%
filter(dep_time < ymd(20130102))
flights %>%
filter(dep_time > ymd(20130430) && dep_time > ymd(20130501))
flights %>%
filter(dep_time > ymd(20130430) | dep_time > ymd(20130501))
flights %>%
filter(as_date(dep_time) == ymd(20130501))
ymd(20130501)
View(flights_dt)
flights_dt[152714,]
flights_dt[152714,5]
as_date(flights_dt[152714,5])
flights_dt[152714,5]
flights_dt[152714,5] == ymd(20130323)
d1 <- "January 1, 2010"
mdy(d1)
d2 <- "2015-Mar-07"
ymd(d2)
d3 <- "06-Jun-2017"
dmy(d3)
d4 <- c("August 19 (2015)", "July 1 (2015)")
mdy(d4)
d5 <- "12/30/14"
mdy(d5)
today()
today(tzone="UTC")
today(tzone="UTC-3")
today(tzone="UTC")
?today
today("GMT")
now("UTC")
now("UTC-3")
today("GMT-3")
?tzone
??tzone
now("GMT")
now()
now("America/New_York")
now("South_America/Brasilia")
now("South_America/Rio")
?with_tz
Sys.timezone()
now("America/Rio")
now("America/Sao_Paulo")
now("-03")
now(-03)
now(tzone="-03")
now(tzone="America/Sao_Paulo")
OlsonNames
OlsonNames()
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_lubridate.R", echo=TRUE)
library(tidyverse)
library(lubridate)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
#Obtenção de componentes internos
year(datetime)
#Obtenção de componentes internos
datetime <- ymd_hms(now())
datetime
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
#Retorno textual
month(datetime, label = TRUE)
month(datetime, label = TRUE, abbr = FALSE)
wday(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
library(nycflights13)
#Aplicação da função
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day,
time %/% 100, #Parte inteira da divisão por 100
time %% 100) #Resto da divisão por 100
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time),
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE))
#Atraso por minutos de cada hora
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
#Atraso por minutos de cada hora - agendamento decolagem
flights_dt %>%
mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
#Atraso por minutos de cada hora - agendamento decolagem
flights_dt %>%
mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
#ggplot(aes(minute, avg_delay)) +
ggplot(aes(minute, n)) +
geom_line()
?floor_date
#Arredondamento
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) +
geom_line()
#Arredondamento
round_date(
x,
unit = "second",
week_start = getOption("lubridate.week.start", 7)
)
datetime
year(datetime) <- 2023
datetime
month(datetime) <- 1
#Configuração/alteração de componentes
datetime
year(datetime) <- 1981
#Configuração/alteração de componentes
datetime
month(datetime) <- 1
day(datetime) <- 31
#Configuração/alteração de componentes
datetime
datetime
hour(datetime) <- 15
minute(datetime) <- 0
datetime
wday(datetime, label = TRUE, abbr = FALSE)
datetime
wday(datetime, label = TRUE, abbr = FALSE)
uptade(datetime, year = 2007, month = 12, mday = 20, hour = 20, minute = 0)
update(datetime, year = 2007, month = 12, mday = 20, hour = 20, minute = 0)
second(datetime) <- 0
datetime
update(datetime, year = 2007, month = 12, mday = 20,
hour = 20, minute = 0, second = 0)
new_datetime <- update(datetime, year = 2007, month = 12, mday = 20,
hour = 20, minute = 0, second = 0)
new_datetime
1+9+8+1+1+3+1+1+5
3+0
2+0+0+7+1+2+2+0+2+0+0+0
1+7
1+6
7+3
#Atualiza as datas para o início de cada ano
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(dep_hour)) +
geom_freqpoly(binwidth = 300)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
##==================================
##Intervalos de tempo
##==================================
#Durações
h_age <- today() - ymd(19810131)
h_age
#Usando lubridate
#Sempre calculado em segundos
as.duration(h_age)
1979+37
dseconds(15)
dminutes(10)
dhours(c(12,14))
ddays(0:5)
dweeks(3)
dyears(1)
#Operações
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
tomorrow
lastyear <- today() - dyears(1)
lastyear
one_pm <- ymd_hms("2016-03-12 13:00:00",
tz = "America/New_York")
one_pm
one_pm + ddays(1)
#Períodos
#Calculados em tempos "humanos"
one_pm + days(1)
#Construtores
seconds(15)
minutes(10)
hours(c(12,24))
days(7)
months(1:6)
weeks(3)
years(1)
years(1.5)
#Operações com períodos
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
ymd("2016-01-01") + dyears(1)
ymd("2016-01-01") + years(1)
#Aplicando ao dataset de voos
flights_dt %>%
filter(arr_time < dep_time)
flights_dt
View(flights_dt)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
flights_dt %>%
filter(overnight, arr_time < dep_time)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_estudoCaso.R", echo=TRUE)
#Intervalos
dyears(1) / ddays(365)
years(1) / days(1)
next_year <- today() + years(1)
next_year
(today() %--% next_year) / ddays(1)
(today() %--% next_year) / days(1)
(today() %--% next_year) %/% days(1)
length(OlsonNames())
