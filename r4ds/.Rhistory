#----/----/---
"yes", NA, 10,
"no", 20, 12
) %>%
mutate(across(male, as.integer),
across(female, as.integer))
preg
preg %>% gather(male, female,
key = "gender",
value = "count")
##Exercícios
#2 - O código falha porque 1999 e 2000 estão digitados como inteiros
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
library(tidyverse)
install.packages("tidyverse")
source("D:/git/rDS/r4ds/rds_cap09_estrutura_tidyr.R", encoding = 'UTF-8', echo=TRUE)
library(tidyverse)
install.packages("tidyverse")
install.packages("dbplyr")
install.packages("cli")
install.packages("tidyverse")
install.packages("tidyverse")
source("D:/GitHub/rDS/r4ds/rds_cap09_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap09_estudoCaso.R", echo=TRUE)
library(tidyverse)
library(nycflights13)
#Dataset airlines
airlines
airports
planes
weather
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
#Chegam de exclusividade nas chaves
planes %>%
count(tailnum) %>%
filter(n > 1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
#Tabelas sem chave primária
flights %>%
count(year, month, day, flights) %>%
filter(n > 1)
#Tabelas sem chave primária
flights %>%
count(year, month, day, flight) %>%
filter(n > 1)
flights %>%
count(year, month, day, tailnum) %>%
filter(n > 1)
##====================================
##Mutate join
##====================================
#Subset para facilitar a compreensão do exemplo
flights2 <- flights %>%
select(yearday, hour, origin, dest, tailnum, carrier)
##====================================
##Mutate join
##====================================
#Subset para facilitar a compreensão do exemplo
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
#Datasets
airlines
flights2
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
#Operações de join
x <- tribble(
~key, val_x,
#----/----
1, "x1",
2, "x2",
3, "x3"
)
#Operações de join
x <- tribble(
~key, ~val_x,
#----/----
1, "x1",
2, "x2",
3, "x3"
)
x
y <- tribble(
~key, ~val_y,
#----/----
1, "y1",
2, "y2",
4, "y3"
)
y
x %>%
inner_join(y, by = "key")
#Outer join: operações que aparecem em ao menos uma das tabelas
x %>%
left_join(y, by = "key")
#União pela direita
x %>%
right_join(y, by = "key")
#União completa
x %>%
full_join(y, by = "key")
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
##====================================
##Chaves duplicadas
##====================================
x <- tribble(
~key, ~value_x,
#----/----
1, "x1",
2, "x2",
2, "x3",
1, "x4",
)
y <- tribble(
~key, ~value_y,
#----/----
1, "y1",
2, "y2",
)
x
y
x %>%
left_join(y, by = "key")
#Ambas as tabelas com keys duplicadas
x <- tribble(
~key, ~value_x,
#----/----
1, "x1",
2, "x2",
2, "x3",
3, "x4",
)
y <- tribble(
~key, ~value_y,
#----/----
1, "y1",
2, "y2",
2, "y3",
3, "y4",
)
x
y
x %>%
left_join(y, by = "key")
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
##====================================
#Definição de colunas com chave
##====================================
#Sem chave (by = NULL) -> Natural join
flights2
##====================================
#Definição de colunas com chave
##====================================
#Sem chave (by = NULL) -> Natural join
flights2 %>%
left_join(weather)
##====================================
#Definição de colunas com chave
##====================================
#Sem chave (by = NULL) -> Natural join
#Todas combinações possíveis são feitas
flights2
weather
flights2 %>%
left_join(weather)
#Chave explícita
flights2 %>%
left_join(planes, by = "tailnum")
#Chave explícita com nomes diferentes
flights2 %>%
left_join(airports, by = c("dest" = "faa"))
flights2 %>%
left_join(airports, by = c("origin" = "faa"))
install.packages("forcats")
install.packages("forcats")
library(tidyverse)
library(forcats)
x1 <- c("Dec", "Apr", "Jan", "Mar")
x2 <- c("Dec", "Apr", "Jam", "Mar")
sort(x1)
#Uso de fatores
month_levels <- c(
"Jan", "Fev", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
#Criar um fator
y1 <- factor(x1, levels = month_levels)
y
y1
sort(y1)
#Criar um fator com algum valor inválid
y2 <- factor(x2, levels = month_levels)
y2
sort(y2)
#Verificar erros explicitamente
parse_factor(x2, levels = month_levels)
#Usar ordem original como levels
x3 <- c("AAA", "AA", "A",
"BBB", "BB", "B")
y3 <- factor(x3, levels = unique(x3))
y3
x4 <- c("A", "BB", "AAA", "B")
#Usar ordem original como levels
x3 <- c("AAA", "AA", "A",
"BBB", "BB", "B",
"A", "BB", "AAA", "B")
y3 <- factor(x3, levels = unique(x3))
y3
sort(y3)
library(tidyverse)
library(forcats)
#Dataset
gss_cat
?gss_cat
#Visualização
gss_cat %>%
count(race)
#Visualização
ggplot(gss_cat, aes(race)) +
geom_bar()
source("D:/GitHub/rDS/r4ds/cap12_estudoCaso.R", echo=TRUE)
#Adicionar níveis sem valores na visualização
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) #Evitar a eliminação de níveis vazios
View(gss_cat)
ggplot(gss_cat, aes(rincome)) +
geom_histogram()
ggplot(gss_cat, aes(rincome)) +
geom_bar()
ggplot(gss_cat, aes(rincome)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
ggplot(gss_cat, aes(rincome)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +
coord_flip()
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Categorias mais comuns
gss_cat %>%
count(relig)
#Categorias mais comuns
gss_cat %>%
desc(count(relig))
#Categorias mais comuns
gss_cat %>%
desc(relig)
#Categorias mais comuns
gss_cat %>%
count(relig, sort = TRUE)
gss_cat %>%
count(partyid, sort = TRUE)
gss_cat %>%
select(relig, denom)
ggplot(gss_cat, aes(relig, fill=denom))
ggplot(gss_cat, aes(relig, fill=denom)) +
geom_bar()
ggplot(gss_cat, aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom == "Episcopal")
gss_cat %>%
filter(denom == "Episcopal") %>%
select(relig, denom)
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom)
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom))
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
count(relig, sort = TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
gss_cat %>%
filter(denom != "Not applicable" | denom != "No answer") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom != "Not applicable" && denom != "No answer") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Marital x tvhour
gss_cat %>%
select(marital, tvhours)
#Marital x tvhour
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours))
?mean
#Marital x tvhour
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
ggplot(aes(tvhour)) +
geom_bar()
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
ggplot(aes(marital)) +
geom_bar()
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
ggplot(aes(marital, tvhour)) +
geom_bar()
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
mar_tv
ggplot(mar_tv, aes(tvhour)) +
geom_bar()
ggplot(mar_tv, aes(tvhour)) +
geom_bar()
ggplot(gss_cat, aes(tvhours)) +
geom_bar()
ggplot(mar_tv, aes(tvhour)) +
geom_bar()
ggplot(mar_tv, aes(marital)) +
geom_bar()
ggplot(mar_tv, aes(marital)) +
geom_bar(aes(y = ..prop..))
ggplot(mar_tv, aes(marital)) +
geom_bar(aes(y = ..prop.., group = 1))
ggplot(mar_tv) +
geom_bar(aes(marital, y = ..prop.., group = 1))
ggplot(mar_tv) +
geom_bar(aes(marital, y = ..prop.., group = 1),
stat = "identity")
ggplot(mar_tv) +
geom_bar(aes(marital, tvhour, group = 1),
stat = "identity")
ggplot(mar_tv) +
geom_bar(aes(marital, tvhour),
stat = "identity")
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
filter(marital != "No answer") %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
mar_tv
ggplot(mar_tv) +
geom_bar(aes(marital, tvhour),
stat = "identity")
?gss_cat
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Race x relig
gss_cat %>%
select(race, relig)
#Race x relig
gss_cat %>%
select(race, relig) %>%
group_by(race) %>%
summarize(n = n())
#Race x relig
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n())
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, fill = race))
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, fill = race),
stat = "identity")
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, race),
stat = "identity")
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, fill=race))
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(race, fill=relig))
#Race x relig
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n())
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
library(tidyverse)
library(forcats)
relig <- gss_cat %>%
group_by(relig) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
relig
ggplot(relig, aes(tvhours, relig)) +
geom_point()
mar_tv
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
filter(marital != "No answer") %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
mar_tv
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
filter(marital != "No answer") %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE),
n = n())
mar_tv
ggplot(mar_tv, aes(marital, tvhour)) +
geom_point()
#Reoarnando fatores para visualização
ggplot(relig, aes(tvhours, fct_reorder(relig, tvhours))) +
geom_point()
ggplot(mar_tv, aes(fct_reorger(marital, tvhour), tvhour)) +
geom_point()
ggplot(mar_tv, aes(fct_reorder(marital, tvhour), tvhour)) +
geom_point()
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
ggplot(mar_tv) +
geom_bar(aes(fct_reorder(marital, tvhour), tvhour),
stat = "identity")
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
#Reordenando fora da visualização para melhor organização
relig %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
#Ajustar nível específico
rincome <- gss_cat %>%
group_by(rincome) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome
ggplot(rincome,
aes(age, rincome)) +
geom_point()
aes(age, fct_relevel(rincome, "Not applicable")) +
geom_point()
#Ajustada posição de não aplicável
ggplot(rincome,
aes(age, fct_relevel(rincome, "Not applicable"))) +
geom_point()
