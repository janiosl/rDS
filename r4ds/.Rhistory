library(tidyverse)
library(lubridate)
library(nycflights13)
#Obtenção de componentes internos
datetime <- ymd_hms(now())
datetime
#Ano e mÊs
year(datetime)
month(datetime)
#Dias
mday(datetime) #Dia do mês
yday(datetime) #Dia do ano
wday(datetime) #Dia da semana
#Retorno textual
month(datetime, label = TRUE)
month(datetime, label = TRUE, abbr = FALSE)
wday(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
#Retomada do dataset do estudo anterior
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day,
time %/% 100, #Parte inteira da divisão por 100
time %% 100) #Resto da divisão por 100
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time),
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
#Voos por dia da semana
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
#Atraso por minutos de cada hora - decolagem
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
#Possibly
x <- list(1, 10, "a")
x %>% map_dbl(possibly(log, NA_real_))
#Quietly
x <- list(1, -1)
x %>% map(quietly(log)) %>% str()
log(x)
mu <- list(5, 10, -3)
mu %>%
map(rnorm, n = 5) %>%
str()
#Variando média e desvio padrão
sigma <- list(1,5,10)
map2(mu, sigma, rnorm, n = 5)
#Variando mais argumentos com pmap
n <- list(1,3,5)
argsl <- list(n,mu,sigma)
argsl
argsl %>%
pmap(rnorm) %>%
str()
args1 <- list(n,mu,sigma)
args1
args1 %>%
pmap(rnorm) %>%
str()
#Nomeando argumentos
args2 <- lsit(mean = mu, sd = sigma, n = n)
#Nomeando argumentos
args2 <- list(mean = mu, sd = sigma, n = n)
args2
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
args2 %>%
pmap(rnorm) %>%
str()
#Usando data frame
params <- tribble(
~mean, ~sd, ñ,
#-----/----/-----
5, 1, 1,
10, 5, 3,
-3, 10, 5
)
#Usando data frame
params <- tribble(
~mean, ~sd, ~n,
#-----/----/-----
5, 1, 1,
10, 5, 3,
-3, 10, 5
)
params
params %>%
pmap(rnom)
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
View(params)
View(params)
f <- c("runif", "rnorm", "rpois")
param <- list(
list(min = -1, max = 1),
list(sd = 5),
list(lambda = 10)
)
f
param
invoke_map(f, param, n = 5) %>% str()
#Organizando funções e argumentos
sim <- tribble(
~f, ~param,
#---/------
"runif", list(min = -1, max =1),
"rnorm", list(sd = 5),
"rpois", list(lambda = 10)
)
sim
sim %>%
mutate(sim = invoke_map(f, params, n = 10))
sim %>%
mutate(sim = invoke_map(f, param, n = 10))
View(sim)
4300+1000+400
5700-2800
dfs <- list(
age = tibble(name = "John", age = 30),
sex = tibble(name = c("John", "Mary"), sex = c("M", "F")),
trt = tibble(name = "Mary", treatment = "A")
)
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
dfs
dfs %>% reduce(full_join)
dfs$age[name == "Mary"]
dfs[name == "Mary"]
dfs$name == "Mary"
dfs %>%
filter(name == "Mary")
df <- dfs %>% reduce(full_join)
df
df %>%
filter(name == "Mary")
df$name == "Mary"
df[df$name == "Mary"]
df %>%
filter(name == "Mary")
?mutate
df %>%
filter(name == "Mary") %>%
mutate(age = 27)
df
df %>%
filter(name == "Mary") %>%
age = 27
?update
df %>%
filter(name == "Mary") %>%
mutate(age = 27)
?where
df$age
vs <- list(
c(1,3,5),
c(1,3,5,7),
c(1,3,5,7,9)
)
vs
vs %>% reduce(intersect)
df
df[2]
df[name=="Mary",]
df[name=="Mary"]
df
df$name == Mary
df$name == "Mary"
df[TRUE]
df[df$name == "Mary"]
df[df$name == "Mary", age]
filter(df, name=="Mary")
filter(df, name=="Mary")$age
filter(df, name=="Mary")$age = 27
filter(df, name=="Mary")$age
uptade(df)
?update
?diplyr::update
library(nycflights13)
library(tidyverse)
?flights
#SALVANDO CONJUNTO DE DADOS CSV
#Ação não relacionada ao estudo. Gravando apenas para uso posterior em Python
#arquivo = ("D:\\git\\python.ds\\data\\flights.csv")
#write.table(flights, file=arquivo, row.names=FALSE, quote=FALSE, sep=",")
View(flights)
#====================================
##Operação de filtro
#====================================
filter(flights,
month == 1,
day == 1)
jan1 <- filter(flights,
month == 1,
day == 1)
#Operação com OR
filter(flights,
month == 11 | month ==12)
filter(flights,
month %in% c(11,12))
#Operação combinadas
filter(flights,
!(arr_delay > 120 | dep_delay > 120)) #Voos sem atraso maior que 120 na chegada ou partida
#Valores faltantes
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df,
is.na(x) | x > 1)
##====================
##EXERCÍCIOS
##====================
#* Atraso maior ou igual a 2 horas na checaga
filter(flights,
dep_delay >= 120)
#* Foram para Houston (IAH ou HOU)
houston <- filter(flights,
dest == "IAH" | dest == "HOU")
#* Foram operadorados pela United, American ou Delta
companies <- filter(flights,
carrier %in% c("AA", "UA", "DL"))
#* Partiram em julho, agosto ou setembro
filter(flights,
month %in% c(7, 8, 9))
#* Chegaram com mais de duas horas de atraso, mas não saíram atrasado
filter(flights,
arr_delay >= 120 & dep_delay <= 0)
#* Atrasaram mais de uma hora, mas compensaram mais de 30 minutos no trajeto
filter(flights,
dep_delay > 60 & arr_delay < 30)
#* Saíram entre meia noite e 6
madrugada <- filter(flights,
dep_time >= 2400 | dep_time <= 600)
#* Uso between
#* dep_time faltante
filter(flights,
is.na(dep_time))
summary(flights)
#*
#*
##====================
##Ordenar linhas
##====================
#Ascendente
arrange(flights,
year, month, day)
#Descendente
arrange(flights,
desc(arr_delay))
#Ordenação com valores faltantes
df <- tibble(x = c(5, NA, 2))
arrange(df, x)
arrange(df, desc(x))
##====================
##EXERCÍCIOS
##====================
#* NA
#* Voos mais atrasados e voos que sairam mais cedo
arrange(flights,
desc(dep_delay))
arrange(flights,
dep_delay)
#* Voos mais rápidos
arrange(flights,
air_time)
##====================
##Selecionar colunas
##====================
select(flights,
year, month, day)
#Aninhando operações
arrange(select(flights, air_time),
air_time)
#Seleção de intervalo
select(flights,
year:day)
#Seleção por exclusão de colunas
df <- select(flights,
-(year:day))
rename(flights,
tail_num = tailnum)
select(flights,
time_hour, air_time, #Coloca a selação no início da tabela
everything()) #Mantém todas as demais colunas após a seleção
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights,
one_of(vars))
select(flights,
contains("delay"))
select(flights,
contains("TIME"))
##================================
##Adicionando colunas calculadas
##================================
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time)
View(flights_sml)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
#Referência a colunas criadas na mesma operação mutate
flights_sml <- mutate(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
#Mantendo apenas colunas criadas na operação
transmute(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
##================================
##Funções e operações úteis
##================================
#Operação entre vetores e escalares
x <- c(1,2,3,4)
x / sum(x)
x - mean(x)
x + x**2
#Aritmética modular
transmute(flights,
hour = dep_time %/% 100,
minute = dep_time %% 100)
4317+343
4660+400
5060-2800
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_basico.R", echo=TRUE)
#Visualização básica dos dados de exemplo
ggplot(sim1, aes(x,y)) +
geom_point()
#Observar como modelos lineares aleatórios se ajustam aos dados
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
models
ggplot(sim1, aes(x, y)) +
geom_abline(
aes(intercept = a1, slope = a2),
data = models, alpha = 1/4
) +
geom_point()
#Função calcula modelo
model <- function(a, data) {
a[1] + data$x * a[2]
}
model
model(c(7, 1.5), sim1)
#Cálculo da distância entre previsão e real baseado em RMSE
measure_distance <- function(mod, data) {
diff <- data$y - model(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
#Avaliar os diversos modelos aleatórios
sim1_dist <- function(a1, a2) {
measure_distance(c(a1,a2), sim1)
}
models <- models %>%
mutate(dist = purr::map2_dbl(a1, a2, sim1_dist))
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
#Visualização dos melhores modelos (menor RMSE)
ggplot(sim1, aes(x,y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(models, aes(a1, a2)) +
geom_point(
size = 4, color = "red"
) +
geom_point(aes(colour = -dist))
ggplot(models, aes(a1, a2)) +
geom_point(
data = filter(models, rank(dist) <= 10),
size = 4, color = "red"
) +
geom_point(aes(colour = -dist))
#Busca em grade de modelos
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid
View(grid)
#Visualização de melhores modelos dentro do grid
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
datra = filter(grid, rank(dist) <= 10),
size = 4, colour = "red"
) +
geom_point(aes(color = -dist))
#Visualização de melhores modelos dentro do grid
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
data = filter(grid, rank(dist) <= 10),
size = 4, colour = "red"
) +
geom_point(aes(color = -dist))
#Visualização dos modelos gerados por grid
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, color = -dist),
data = filter(grid, rank(dist) <= 10)
)
#Otimização para encontrar modelo adequado
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
best
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2], color = "red")
best$par
#Modelagem usando ferramenta lm
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
sim1_mod$coefficients
sim1_mod$coefficients[1]
sim1_mod$coefficients[2]
coef(sim1_mod)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(sim1_mod)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(sim1_mod$coefficients[1], sim1_mod$coefficients[2])
lm
sim1_mod
sim1_mod$coefficients
sim1_mod$coefficients[1]
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_basico.R", echo=TRUE)
best$par
coef(sim1_mod)
?geom_abline
cf <- coef(sim1_mod)
cf
class(cf)
cf <- list(coef(sim1_mod))
cf
as.list(coef(sim1_mod))
cf <- as.list(coef(sim1_mod))
cf
cf$`(Intercept)`
cf[1]
cf[[1]]
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = as.list(coef(sim1_mod))[[1]],
slope = as.list(coef(sim1_mod))[[2]],
color = "blue")
library(tidyverse)
library(modelr)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
grid <- sim1 %>%
data_grid(x)
View(grid)
sim1_mod <- lm(y ~ x, data = sim1)
grid <- grid %>%
add_predictions(sim1_mod)
View(grid)
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_prev.R", echo=TRUE)
sim1
View(sim1)
View(grid)
View(grid)
#Visualização
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(
aes(y = pred),
data = grid,
color = "red",
size = 1
)
#Adicionando resíduos do modelo
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
#Visualização dos resíduos
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_prev.R", echo=TRUE)
