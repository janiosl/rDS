library(tidyverse)
library(readr)
install.packages("tidyverse")
library(tidyverse)
library(readr)
source("D:/GitHub/rDS/r4ds/rds_cap08_data_readr.R", echo=TRUE)
print("Teste")
source("D:/GitHub/rDS/r4ds/rds_cap08_data_readr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap08_data_readr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap08_data_readr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap08_data_readr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap08_data_readr.R", echo=TRUE)
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
date_names_langs()
parse_date("1 janeiro 2015", "%d%B%Y",
locale = locale("pt"))
parse_date("1 janeiro 2015", "%d %B %Y",
locale = locale("pt"))
#Exemplo de parse
challenge <- read_csv(readr_example("challenge.csv"))
library(tidyverse)
library(readr)
#Exemplo de parse
challenge <- read_csv(readr_example("challenge.csv"))
View(challenge)
problems(challenge)
##Não ocorreu problemas na interpretação
##das colunas (provavelmente devido alguma atualização do pacote)
tail(challenge)
#Se ocorresse o problema poderia ser corrigido especificando as colunas
challenge <- read_csv(readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
))
##Não ocorreu problemas na interpretação
##das colunas (provavelmente devido alguma atualização do pacote)
tail(challenge)
#Ampliar a análise padrão para readr "advinhar" as colunas
challenge2 <- read_csv(readr_example("challenge"),
guess_max = 1001)
#Ampliar a análise padrão para readr "advinhar" as colunas
challenge2 <- read_csv(readr_example("challenge.csv"),
guess_max = 1001)
#Armazenar resultados de maneira simples (sem preservar tipos de dados)
write_csv(challenge,
"data/challenge.csv")
read_csv("data/challenge.csv")
tail(read_csv("data/challenge.csv"))
#Armazenar resultados de maneira aprimorada (preserva tipos de dados)
write_rds(challenge,
"data/challenge.rds")
read_rds("data/challenge.rds")
table4a <- tribble(
~country, ~1999, ~2000,
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488
)
table4a <- tribble(
~country, ~1999, ~2000,
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488
)
table4a <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488
)
View(table4a)
table4a
table4a <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488,
"China", 212258, 213766
)
table4a
?tribble
table4a <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488,
"China", 212258, 213766
) %>%
across("1999", as.integer)
tribble(
~a, ~b, ~c,
1, "2000-01-01", "1.5"
) %>%
dplyr::mutate(
dplyr::across(a, as.integer),
dplyr::across(b, as.Date)
)
tribble(
~a, ~b, ~c,
1, "2000-01-01", "1.5"
) %>%
dplyr::mutate(
dplyr::across(a, as.integer),
dplyr::across(b, as.Date)
)
table4a <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488,
"China", 212258, 213766
) %>% mutate(
across("1999", as.integer))
table4a
table4a <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488,
"China", 212258, 213766
) %>% mutate(
across("1999", as.integer),
across("2000", as.integer))
table4a
library(tidyverse)
table4a <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 745, 2666,
"Brasil", 37737, 80488,
"China", 212258, 213766
) %>% mutate(
across("1999", as.integer),
across("2000", as.integer))
table4a
#Ajustando tabela para torná-la "tidy"
table4a %>%
gather('1999', '2000',    #Colunas originais
key = "year",     #Nome da coluna que receberá as colunas antigas
value = "cases")  #Nome da coluna que receberá os valores
table4b <- tribble(
~country, ~"1999", ~"2000",
##====/====/====
"Afeganistão", 19987071, 20595360,
"Brasil", 172006362, 174504898,
"China", 1272915272, 1280428583
) %>% mutate(
across("1999", as.integer),
across("2000", as.integer))
table4b
table4b %>%
gather('1999', '2000',
key = "year",
value = "population")
#Ajustando tabelas para torná-las "tidy"
td4a <- table4a %>%
gather('1999', '2000',    #Colunas originais
key = "year",     #Nome da coluna que receberá as colunas antigas
value = "cases")  #Nome da coluna que receberá os valores
td4b <- table4b %>%
gather('1999', '2000',
key = "year",
value = "population")
left_join(td4a, td4b)
td4_j <- left_join(td4a, td4b)
td4_j
##===================================
##Espalhar com spred
##===================================
table2 <- tribble(
~country, ~year, ~type, ~count,
#====/====/====/====
"Afeganistão", 1999, "cases", 745,
"Afeganistão", 1999, "population", 19987071,
"Afeganistão", 2000, "cases", 2666,
"Afeganistão", 2000, "population", 20595360,
"Brasil", 1999, "cases", 37737,
"Brasil", 1999, "population", 172006362,
"Brasil", 2000, "cases", 80488,
"Brasil", 2000, "population", 174504898,
"China", 1999, "cases", 212258,
"China", 1999, "population", 1272915272,
"China", 2000, "cases", 213766,
"China", 2000, "population", 1280428583)
table2
##===================================
##Espalhar com spred
##===================================
table2 <- tribble(
~country, ~year, ~type, ~count,
#====/====/====/====
"Afeganistão", 1999, "cases", 745,
"Afeganistão", 1999, "population", 19987071,
"Afeganistão", 2000, "cases", 2666,
"Afeganistão", 2000, "population", 20595360,
"Brasil", 1999, "cases", 37737,
"Brasil", 1999, "population", 172006362,
"Brasil", 2000, "cases", 80488,
"Brasil", 2000, "population", 174504898,
"China", 1999, "cases", 212258,
"China", 1999, "population", 1272915272,
"China", 2000, "cases", 213766,
"China", 2000, "population", 1280428583) %>%
mutate(across("year", as.integer),
across("count", as.integer))
table2
View(table2)
#Distribuindo os valores e colunas de maneira tidy
spread(table2,
key = type,
values = count)
#Distribuindo os valores e colunas de maneira tidy
spread(table2,
key = type,
value = count)
td4_j
##Exercícios
preg <- trible(
~pregnant, ~male, female,
#----/----/---
"yes", NA, 10,
"no", 20, 12
)
##Exercícios
preg <- tribble(
~pregnant, ~male, female,
#----/----/---
"yes", NA, 10,
"no", 20, 12
)
##Exercícios
preg <- tribble(
~pregnant, ~male, ~female,
#----/----/---
"yes", NA, 10,
"no", 20, 12
)
preg
spread(preg,
key = "gender",
value = "count")
preg %>% gather(male, female,
key = "gender",
value = "count")
##Exercícios
preg <- tribble(
~pregnant, ~male, ~female,
#----/----/---
"yes", NA, 10,
"no", 20, 12
) %>%
mutate(across(male, as.integer),
across(female, as.integer))
preg
preg %>% gather(male, female,
key = "gender",
value = "count")
##Exercícios
#2 - O código falha porque 1999 e 2000 estão digitados como inteiros
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
library(tidyverse)
install.packages("tidyverse")
source("D:/git/rDS/r4ds/rds_cap09_estrutura_tidyr.R", encoding = 'UTF-8', echo=TRUE)
library(tidyverse)
install.packages("tidyverse")
install.packages("dbplyr")
install.packages("cli")
install.packages("tidyverse")
install.packages("tidyverse")
source("D:/GitHub/rDS/r4ds/rds_cap09_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap09_estudoCaso.R", echo=TRUE)
library(tidyverse)
library(nycflights13)
#Dataset airlines
airlines
airports
planes
weather
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
#Chegam de exclusividade nas chaves
planes %>%
count(tailnum) %>%
filter(n > 1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
#Tabelas sem chave primária
flights %>%
count(year, month, day, flights) %>%
filter(n > 1)
#Tabelas sem chave primária
flights %>%
count(year, month, day, flight) %>%
filter(n > 1)
flights %>%
count(year, month, day, tailnum) %>%
filter(n > 1)
##====================================
##Mutate join
##====================================
#Subset para facilitar a compreensão do exemplo
flights2 <- flights %>%
select(yearday, hour, origin, dest, tailnum, carrier)
##====================================
##Mutate join
##====================================
#Subset para facilitar a compreensão do exemplo
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
#Datasets
airlines
flights2
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
#Operações de join
x <- tribble(
~key, val_x,
#----/----
1, "x1",
2, "x2",
3, "x3"
)
#Operações de join
x <- tribble(
~key, ~val_x,
#----/----
1, "x1",
2, "x2",
3, "x3"
)
x
y <- tribble(
~key, ~val_y,
#----/----
1, "y1",
2, "y2",
4, "y3"
)
y
x %>%
inner_join(y, by = "key")
#Outer join: operações que aparecem em ao menos uma das tabelas
x %>%
left_join(y, by = "key")
#União pela direita
x %>%
right_join(y, by = "key")
#União completa
x %>%
full_join(y, by = "key")
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
##====================================
##Chaves duplicadas
##====================================
x <- tribble(
~key, ~value_x,
#----/----
1, "x1",
2, "x2",
2, "x3",
1, "x4",
)
y <- tribble(
~key, ~value_y,
#----/----
1, "y1",
2, "y2",
)
x
y
x %>%
left_join(y, by = "key")
#Ambas as tabelas com keys duplicadas
x <- tribble(
~key, ~value_x,
#----/----
1, "x1",
2, "x2",
2, "x3",
3, "x4",
)
y <- tribble(
~key, ~value_y,
#----/----
1, "y1",
2, "y2",
2, "y3",
3, "y4",
)
x
y
x %>%
left_join(y, by = "key")
source("D:/GitHub/rDS/r4ds/rds_cap10_dados_rel.R", echo=TRUE)
##====================================
#Definição de colunas com chave
##====================================
#Sem chave (by = NULL) -> Natural join
flights2
##====================================
#Definição de colunas com chave
##====================================
#Sem chave (by = NULL) -> Natural join
flights2 %>%
left_join(weather)
##====================================
#Definição de colunas com chave
##====================================
#Sem chave (by = NULL) -> Natural join
#Todas combinações possíveis são feitas
flights2
weather
flights2 %>%
left_join(weather)
#Chave explícita
flights2 %>%
left_join(planes, by = "tailnum")
#Chave explícita com nomes diferentes
flights2 %>%
left_join(airports, by = c("dest" = "faa"))
flights2 %>%
left_join(airports, by = c("origin" = "faa"))
install.packages("forcats")
install.packages("forcats")
library(tidyverse)
library(forcats)
x1 <- c("Dec", "Apr", "Jan", "Mar")
x2 <- c("Dec", "Apr", "Jam", "Mar")
sort(x1)
#Uso de fatores
month_levels <- c(
"Jan", "Fev", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
#Criar um fator
y1 <- factor(x1, levels = month_levels)
y
y1
sort(y1)
#Criar um fator com algum valor inválid
y2 <- factor(x2, levels = month_levels)
y2
sort(y2)
#Verificar erros explicitamente
parse_factor(x2, levels = month_levels)
#Usar ordem original como levels
x3 <- c("AAA", "AA", "A",
"BBB", "BB", "B")
y3 <- factor(x3, levels = unique(x3))
y3
x4 <- c("A", "BB", "AAA", "B")
#Usar ordem original como levels
x3 <- c("AAA", "AA", "A",
"BBB", "BB", "B",
"A", "BB", "AAA", "B")
y3 <- factor(x3, levels = unique(x3))
y3
sort(y3)
library(tidyverse)
library(forcats)
#Dataset
gss_cat
?gss_cat
#Visualização
gss_cat %>%
count(race)
#Visualização
ggplot(gss_cat, aes(race)) +
geom_bar()
source("D:/GitHub/rDS/r4ds/cap12_estudoCaso.R", echo=TRUE)
#Adicionar níveis sem valores na visualização
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) #Evitar a eliminação de níveis vazios
View(gss_cat)
ggplot(gss_cat, aes(rincome)) +
geom_histogram()
ggplot(gss_cat, aes(rincome)) +
geom_bar()
ggplot(gss_cat, aes(rincome)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
ggplot(gss_cat, aes(rincome)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +
coord_flip()
