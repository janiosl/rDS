variancia(a2)
var(p[[1]])
variancia(a2)
a
dif(a[[1]])
diff(a[[1]])
diff(a[[1]])^2
181476+79524
261000/2
variancia(2)
variancia(a)
261000/3
var(a[[1]])
pesos <- c(2.64, 2.38, 2.30, 2.69, 2.32, 2.66, 2.36, 2.70, 2.49, 1.56,
2.33, 2.26, 2.15, 2.45, 2.02, 2.73, 3.09, 2.47, 2.44, 2.79)
mean(pesos)
media(pesos)
var(pesos)
variancia(pesos)
pesos_a <- amo(pesos)
pesos_a
media(pesos_a)
variancia(pesos_a)
pesos_p <- pop(pesos)
pesos_p
variancia(pesos_p)
length(pesos)
length(pesos_p[[1]])
length(pesos_p[[1]])-1
diff(pesos)
diff(pesos)^2
2.64-2.38
0.26^2
-0.26^2
?diff
diff(pesos)*-1
(diff(pesos)*-1)^2
sum((diff(pesos)*-1)^2)
sum((diff(pesos)*-1)^2)/(length(pesos)-1)
pesos
pesos - 1
pesos - media(pesos)
(pesos - media(pesos))^2
sum((pesos - media(pesos))^2)
sum((pesos - media(pesos))^2)/length(pesos)
sum((pesos - media(pesos))^2)/(length(pesos)-1)
variancia.amo <- function(x) {
"Variância da amostra usa n-1"
#Acrescentar código da variância amostral
sum((x[[1]] - media(x))^2)/(length(x[[1]])-1)
}
variancia(a)
variancia(c(1,2,3))
var(a[[1]])
var(pesos)
variancia(pesos)
pesos_a <- amo(pesos)
pesos_a
media(pesos_a)
variancia(pesos_a)
source("D:/GitHub/rDS/r4ds/rds_cap16_extra_poo.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap16_extra_poo.R", echo=TRUE)
var(pesos_a[[1]])
variancia(pesos_a)
pesos_a
var(pesos_a[[1]])
variancia(pesos_a)
pesos_p
var(pesos_p[[1]])
variancia(pesos_p)
source("D:/GitHub/rDS/r4ds/rds_cap16_extra_poo.R", echo=TRUE)
#Recognising S4 Objects
library(stats4)
y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
nLL <- function(lambda) - sum(dpois(y, lambda, log = TRUE))
fit <- mle(nLL, start = list(lambda = 5), nobs = length(y))
isS4(fti)
isS4(fit)
typeof(fit)
otype(fit)
# S4 generic
isS4(nobs)
nobs
ftype(nobs)
ftype(nobs)
is(fit)
is(fit, "mle")
#Defining classes and creating objects
setClass("Person",
slots = list(name = "character", age = "numeric"))
setClass("Employee",
slots = list(boss = "Person"),
contains = "Person")
alice <- new("Person", name = "Alice", age = 40)
john <- new("Employee", name = "John", age = 20, boss = alice)
alice
john
alice@age
slot(john, "boss")
#S4 object that contains (inherits from) an S3 class or a base type
setClass("RangedNumeric",
contains = "numeric",
slots = list(min = "numeric", max = "numeric"))
rn <- new("RangedNumeric", 1:10, min = 1, max = 10)
rn@min
rn@.Data
#Creating new methods and generics
setGeneric("union")
setMethod("union",
c(x = "data.frame", y = "data.frame"),
function(x, y) {
unique(rbind(x, y))
}
)
# From methods: takes generic name and class names
selectMethod("nobs", list("mle"))
# From pryr: takes an unevaluated function call
method_from_call(nobs(fit))
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
map_dbl(df, mean)
map_dbl(df, median)
#Map usando pipe
df %>% map_dbl(mean)
df %>% map_dbl(median)
df %>% map_dbl(sd)
log(10)
#Tratamento de falhas
safe_log <- safely(log)
safe_log(10)
safe_log("a")
x <- list(1, 10, "a")
y <- x %>% map(safely(log(x)))
str(y)
y <- x %>% map(safely(log))
str(y)
#Separação dos resultados
y <- y %>% transpose()
str(y)
y$result
y$result
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
library(tidyverse)
library(lubridate)
library(nycflights13)
#Obtenção de componentes internos
datetime <- ymd_hms(now())
datetime
#Ano e mÊs
year(datetime)
month(datetime)
#Configuração/alteração de componentes
datetime
year(datetime) <- 1981
month(datetime) <- 1
day(datetime) <- 31
hour(datetime) <- 15
minute(datetime) <- 0
second(datetime) <- 0
datetime
wday(datetime, label = TRUE, abbr = FALSE)
new_datetime <- update(datetime, year = 2007, month = 12, mday = 20,
hour = 20, minute = 0, second = 0)
new_datetime
#Atraso por minutos de cada hora - agendamento decolagem
flights_dt %>%
mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
#ggplot(aes(minute, avg_delay)) + #Atraso médio
ggplot(aes(minute, n)) + #Quantidade
geom_line()
library(tidyverse)
library(lubridate)
library(nycflights13)
#Obtenção de componentes internos
datetime <- ymd_hms(now())
datetime
#Ano e mÊs
year(datetime)
month(datetime)
#Dias
mday(datetime) #Dia do mês
yday(datetime) #Dia do ano
wday(datetime) #Dia da semana
#Retorno textual
month(datetime, label = TRUE)
month(datetime, label = TRUE, abbr = FALSE)
wday(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
#Retomada do dataset do estudo anterior
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day,
time %/% 100, #Parte inteira da divisão por 100
time %% 100) #Resto da divisão por 100
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time),
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
#Voos por dia da semana
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
#Atraso por minutos de cada hora - decolagem
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
#Possibly
x <- list(1, 10, "a")
x %>% map_dbl(possibly(log, NA_real_))
#Quietly
x <- list(1, -1)
x %>% map(quietly(log)) %>% str()
log(x)
mu <- list(5, 10, -3)
mu %>%
map(rnorm, n = 5) %>%
str()
#Variando média e desvio padrão
sigma <- list(1,5,10)
map2(mu, sigma, rnorm, n = 5)
#Variando mais argumentos com pmap
n <- list(1,3,5)
argsl <- list(n,mu,sigma)
argsl
argsl %>%
pmap(rnorm) %>%
str()
args1 <- list(n,mu,sigma)
args1
args1 %>%
pmap(rnorm) %>%
str()
#Nomeando argumentos
args2 <- lsit(mean = mu, sd = sigma, n = n)
#Nomeando argumentos
args2 <- list(mean = mu, sd = sigma, n = n)
args2
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
args2 %>%
pmap(rnorm) %>%
str()
#Usando data frame
params <- tribble(
~mean, ~sd, ñ,
#-----/----/-----
5, 1, 1,
10, 5, 3,
-3, 10, 5
)
#Usando data frame
params <- tribble(
~mean, ~sd, ~n,
#-----/----/-----
5, 1, 1,
10, 5, 3,
-3, 10, 5
)
params
params %>%
pmap(rnom)
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
View(params)
View(params)
f <- c("runif", "rnorm", "rpois")
param <- list(
list(min = -1, max = 1),
list(sd = 5),
list(lambda = 10)
)
f
param
invoke_map(f, param, n = 5) %>% str()
#Organizando funções e argumentos
sim <- tribble(
~f, ~param,
#---/------
"runif", list(min = -1, max =1),
"rnorm", list(sd = 5),
"rpois", list(lambda = 10)
)
sim
sim %>%
mutate(sim = invoke_map(f, params, n = 10))
sim %>%
mutate(sim = invoke_map(f, param, n = 10))
View(sim)
4300+1000+400
5700-2800
dfs <- list(
age = tibble(name = "John", age = 30),
sex = tibble(name = c("John", "Mary"), sex = c("M", "F")),
trt = tibble(name = "Mary", treatment = "A")
)
source("D:/GitHub/rDS/r4ds/rds_cap17_loops_purrr.R", echo=TRUE)
dfs
dfs %>% reduce(full_join)
dfs$age[name == "Mary"]
dfs[name == "Mary"]
dfs$name == "Mary"
dfs %>%
filter(name == "Mary")
df <- dfs %>% reduce(full_join)
df
df %>%
filter(name == "Mary")
df$name == "Mary"
df[df$name == "Mary"]
df %>%
filter(name == "Mary")
?mutate
df %>%
filter(name == "Mary") %>%
mutate(age = 27)
df
df %>%
filter(name == "Mary") %>%
age = 27
?update
df %>%
filter(name == "Mary") %>%
mutate(age = 27)
?where
df$age
vs <- list(
c(1,3,5),
c(1,3,5,7),
c(1,3,5,7,9)
)
vs
vs %>% reduce(intersect)
df
df[2]
df[name=="Mary",]
df[name=="Mary"]
df
df$name == Mary
df$name == "Mary"
df[TRUE]
df[df$name == "Mary"]
df[df$name == "Mary", age]
filter(df, name=="Mary")
filter(df, name=="Mary")$age
filter(df, name=="Mary")$age = 27
filter(df, name=="Mary")$age
uptade(df)
?update
?diplyr::update
library(nycflights13)
library(tidyverse)
?flights
#SALVANDO CONJUNTO DE DADOS CSV
#Ação não relacionada ao estudo. Gravando apenas para uso posterior em Python
#arquivo = ("D:\\git\\python.ds\\data\\flights.csv")
#write.table(flights, file=arquivo, row.names=FALSE, quote=FALSE, sep=",")
View(flights)
#====================================
##Operação de filtro
#====================================
filter(flights,
month == 1,
day == 1)
jan1 <- filter(flights,
month == 1,
day == 1)
#Operação com OR
filter(flights,
month == 11 | month ==12)
filter(flights,
month %in% c(11,12))
#Operação combinadas
filter(flights,
!(arr_delay > 120 | dep_delay > 120)) #Voos sem atraso maior que 120 na chegada ou partida
#Valores faltantes
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df,
is.na(x) | x > 1)
##====================
##EXERCÍCIOS
##====================
#* Atraso maior ou igual a 2 horas na checaga
filter(flights,
dep_delay >= 120)
#* Foram para Houston (IAH ou HOU)
houston <- filter(flights,
dest == "IAH" | dest == "HOU")
#* Foram operadorados pela United, American ou Delta
companies <- filter(flights,
carrier %in% c("AA", "UA", "DL"))
#* Partiram em julho, agosto ou setembro
filter(flights,
month %in% c(7, 8, 9))
#* Chegaram com mais de duas horas de atraso, mas não saíram atrasado
filter(flights,
arr_delay >= 120 & dep_delay <= 0)
#* Atrasaram mais de uma hora, mas compensaram mais de 30 minutos no trajeto
filter(flights,
dep_delay > 60 & arr_delay < 30)
#* Saíram entre meia noite e 6
madrugada <- filter(flights,
dep_time >= 2400 | dep_time <= 600)
#* Uso between
#* dep_time faltante
filter(flights,
is.na(dep_time))
summary(flights)
#*
#*
##====================
##Ordenar linhas
##====================
#Ascendente
arrange(flights,
year, month, day)
#Descendente
arrange(flights,
desc(arr_delay))
#Ordenação com valores faltantes
df <- tibble(x = c(5, NA, 2))
arrange(df, x)
arrange(df, desc(x))
##====================
##EXERCÍCIOS
##====================
#* NA
#* Voos mais atrasados e voos que sairam mais cedo
arrange(flights,
desc(dep_delay))
arrange(flights,
dep_delay)
#* Voos mais rápidos
arrange(flights,
air_time)
##====================
##Selecionar colunas
##====================
select(flights,
year, month, day)
#Aninhando operações
arrange(select(flights, air_time),
air_time)
#Seleção de intervalo
select(flights,
year:day)
#Seleção por exclusão de colunas
df <- select(flights,
-(year:day))
rename(flights,
tail_num = tailnum)
select(flights,
time_hour, air_time, #Coloca a selação no início da tabela
everything()) #Mantém todas as demais colunas após a seleção
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights,
one_of(vars))
select(flights,
contains("delay"))
select(flights,
contains("TIME"))
##================================
##Adicionando colunas calculadas
##================================
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time)
View(flights_sml)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
#Referência a colunas criadas na mesma operação mutate
flights_sml <- mutate(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
#Mantendo apenas colunas criadas na operação
transmute(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
##================================
##Funções e operações úteis
##================================
#Operação entre vetores e escalares
x <- c(1,2,3,4)
x / sum(x)
x - mean(x)
x + x**2
#Aritmética modular
transmute(flights,
hour = dep_time %/% 100,
minute = dep_time %% 100)
