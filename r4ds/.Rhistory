minus = x - y,
stop("Operação desconhecida")
)
}
a <- 2
b <- 2
opr(a,b,op)
opr(a,b,"minus")
opr <- function(x, y, op){
switch (op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y
stop("Operação desconhecida")
a <- 2
b <- 2
opr <- function(x, y, op){
switch (op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Operação desconhecida")
)
}
opr(a,b,op)
opr(a,b,"minus")
opr(a,b,times)
opr(a,b,"times")
opr(a,b,"divide")
oper(10,7,"minus")
opr(10,7,"minus")
opr(10,7,"times")
rm(op)
opr <- function(x, y, op="plus"){
switch (op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Operação desconhecida")
)
}
a <- 2
b <- 2
opr(a,b)
opr(a,b,"minus")
opr(a,b,"times")
opr(a,b,"divide")
opr(10,7,"minus")
opr(10,7,"times")
opr(10,7,"plus")
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R")
# Argumentos de funções ----------------------------------------------------
mean_c <- function(x, conf = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - conf
mean(x) + se * qnorm(c(alpah / 2, 1 - alpha / 2))
}
x <- runif(100)
?runif
plot(x)
mean_c(x)
# Argumentos de funções ----------------------------------------------------
mean_c <- function(x, conf = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - conf
mean(x) + se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
mean_c(x)
mean_c(x, 0.99)
x
hist(x)
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R", echo=TRUE)
wt_mean <- function(x, w) {
if (length(x) != length(w)) {
stop("x and w must be the same length", call. = FALSE)
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 1:6)
wt_mean(1:6, 1:3)
wt_mean <- function(x, w, na.rm = FALSE) {
stopifnot(is.logical(na.rm), length(na.rm) == 1)
stopifnot(length(x) == length(y))
if (na.rm) {
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 1:6)
wt_mean <- function(x, w, na.rm = FALSE) {
stopifnot(is.logical(na.rm), length(na.rm) == 1)
stopifnot(length(x) == length(w))
if (na.rm) {
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 1:6)
wt_mean(1:6, 1:3, na.rm = "ERRO")
wt_mean(1:6, 1:6)
wt_mean(1:6, 1:6, na.rm = "ERRO")
wt_mean(1:6, 1:3, na.rm = TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R", echo=TRUE)
wt_mean <- function(x, w, na.rm = FALSE) {
stopifnot(is.logical(na.rm), length(na.rm) == 1)
stopifnot(length(x) == length(w))
if (na.rm) {
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 1:6)
wt_mean(1:6, 1:6, na.rm = "ERRO")
wt_mean(1:6, 1:3, na.rm = TRUE)
wt_mean(c(2,2,NA,3,3), 1:5)
wt_mean(c(2,2,NA,3,3), 1:5, na.rm = TRUE) #Funciona
wt_mean(1:6, 1:6, na.rm = "ERRO") #Erro aciona gatilho para exceção
wt_mean(1:6, 1:3, na.rm = TRUE) #Erro aciona gatilho para exceção
show_missings <- function(df) {
n <- sum(is.na(df))
cat("Missing values: ", n, "\n", sep = "")
invisible(df)
}
x <- show_missings(mtcars)
x
class(x)
dim(x)
mtcars %>%
show_missings() %>%
mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>%
show_missings()
library(tidyverse)
mtcars %>%
show_missings() %>%
mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>%
show_missings()
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R", echo=TRUE)
wt_mean(1:6, 1:3) #Erro aciona gatilho para exceção
wt_mean <- function(x, w, na.rm = FALSE) {
stopifnot(is.logical(na.rm), length(na.rm) == 1)
stopifnot(length(x) == length(w))
if (na.rm) {
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 1:6) #Funciona
wt_mean(c(2,2,NA,3,3), 1:5) #Funciona, mas retorna NA
wt_mean(c(2,2,NA,3,3), 1:5, na.rm = TRUE) #Funciona
wt_mean(1:6, 1:6, na.rm = "ERRO") #Erro aciona gatilho para exceção
wt_mean(1:6, 1:3, na.rm = TRUE) #Erro aciona gatilho para exceção
show_missings <- function(df) {
n <- sum(is.na(df))
cat("Missing values: ", n, "\n", sep = "")
invisible(df)
}
x <- show_missings(mtcars)
class(x)
dim(x)
library(tidyverse)
mtcars %>%
show_missings() %>%
mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>%
show_missings()
9172.22+925.6
10097.82+1341.74
source("D:/GitHub/rDS/r4ds/rds_cap15_funcs.R", echo=TRUE)
wt_mean(1:6, 1:6) #Funciona
wt_mean(c(2,2,NA,3,3), 1:5) #Funciona, mas retorna NA
wt_mean(c(2,2,NA,3,3), 1:5, na.rm = TRUE) #Funciona
wt_mean(1:6, 1:6, na.rm = "ERRO") #Erro aciona gatilho para exceção
wt_mean(1:6, 1:3, na.rm = TRUE) #Erro aciona gatilho para exceção
show_missings <- function(df) {
n <- sum(is.na(df))
cat("Missing values: ", n, "\n", sep = "")
invisible(df)
}
x <- show_missings(mtcars)
class(x)
dim(x)
library(tidyverse)
mtcars %>%
show_missings() %>%
mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>%
show_missings()
library(tidyverse)
typeof(letters)
typeof(1:10)
typeof(letters)
typeof(1:10)
##Tamanho
x <- list("a", "b", 1:10)
length(x)
x
y <- c(1:10)
y
length(y)
1:10 %% 3
1:10 %% 3 == 0
#Manual
c(TRUE, TRUE, FALSE, NA)
v <- c(1,2,3,4,5,6,NA,8)
V
v
v == 0
v > 3
v <- c(1,2,3,4,5,6,NA,8)
v
vl <- v > 3
vl
#Vetor numérico
typeof(1)
typeof(1L)
typeof(0.5)
x <- sqrt(2) ^ 2
x
x - 2
x == 2
near(x, 2)
near(x, 3)
source("D:/GitHub/rDS/r4ds/rds_cap16_vetores.R", echo=TRUE)
c(*1, 0, 1) / 0
#Valores especiais
c(-1, 0, 1) / 0
is.finite(y)
is.infinite(y)
y
#Operações lógicas com valores especiais
y = c(0, Inf, -Inf, NA, NaN)
y
is.finite(y)
is.infinite(y)
is.na(y)
is.nan(y)
source("D:/GitHub/rDS/r4ds/rds_cap16_vetores.R", echo=TRUE)
#Conversão
as.integer(c(TRUE, FALSE, FALSE, TRUE))
as.logical(c(1,0,0,1))
as.logical(c(1,0,0,1,3))
as.logical(c(1,0,0,1,3,-1,0))
x <- sample(20,, 100, replace = TRUE)
x <- sample(20, 100, replace = TRUE)
x
y <- x > 10
y
sum(y)
mean(y)
#Operações entre vetores e escalares
#Não há escalar real no R, por isso as operações são naturalmente vetorizadas
sample(10) + 100
sample(10)
#Operações entre vetores e escalares
#Não há escalar real no R, por isso as operações são naturalmente vetorizadas
v <- sample(10)
v
v + 100
v <- runif(10)
v
v > 0.5
v1 <- sample(10)
v2 <- sample(10)
v1
v2
v1 + v2
1:10
1:2
1:10 + 1:2
1:10 + 1:3
#Reciclagem
tibble(x = 1:4, y = 1:2)
tibble(x = 1:4, y = rep(1:2, 2))
tibble(x = 1:4, each(1:2, 2))
tibble(x = 1:4, y= each(1:2, 2))
tibble(x = 1:4, y = rep(1:2, each = 2))
source("D:/GitHub/rDS/r4ds/rds_cap16_vetores.R", echo=TRUE)
c(x = 1, y = 2, z = 4)
vetor_nomeado = c(1,2,3)
vetor_nomeado
set_names(vetor_nomeado, c("a", "b", "c"))
vetor_nomeado
#Subconjuntos
x <- c("one", "two", "three", "four", "five")
x
x[c(3, 2, 5)]
x[c(1,1,5,5,5,2)]
source("D:/GitHub/rDS/r4ds/rds_cap16_vetores.R", echo=TRUE)
#Eliminação por posição
x[c(-1,-3,-5)]
#Filtro lógico
x <- c(10,3,NA,5,8,1,NA)
x[!is.na(x)]
x[x %% 2 == 0]
#Filtro em vetor nomeado
x <- c(abc = 1, def = 2, xyz = 3)
x[c("xyz", "def")]
x["abc"]
x <- list(1,2,3)
x
str(x)
x_named <- list(a = 1, b = 2, c = 3)
x_named
str(x_named)
#Valores heterogêneos
y <- list("a", 1L, 1.5, TRUE)
y
str(y)
#Lista de listas
z <- list(list(1,2),
list(3,4))
str(z)
z
a <- list(a = 1:3,
b = "a string",
c = pi,
d = list(1,-5))
str(a)
#Subconjuntos de listas
#Sublista
str(a[1:2])
str(a[4])
str(a[3])
y
#Componente único [[ -> Remove um nível de hierarquia
str(y[[1]])
str(y[[4]])
str(a[[1]])
str(a[[4]])
#Elementos nomeados $ -> funciona como [[ sem aspas
a$a
x_named$c
a[["a"]]
#Elementos nomeados $ -> funciona como [[ sem aspas
a$a
a[["a"]]
x_named$c
x_named[["c"]]
str(a[[4]])
str(a[[[1]]])
str(a[[4]])
str(a[[4]][[1]])
str(a[[4]][[2]])
source("D:/GitHub/rDS/r4ds/rds_cap16_vetores.R", echo=TRUE)
a$d
str(a$d)
str(a$d[[2]])
#Atributos
x <- 1:10
str(x)
attr(x, "greeting")
x
attr(x, "greeting") <- "Hi!"
x
attr(x, "farewell") <- "Bye"
attributes(x)
str(x)
as.Date
methods("as.Date")
getS3method("as.Date", "Default")
getS3method("as.Date", "default")
#Fatores
x <- factors(c("ab", "cd", "ab"),
levels = c("ab", "cd", "ef"))
typeof(x)
attributes(x)
#Fatores
x <- factor(c("ab", "cd", "ab"),
levels = c("ab", "cd", "ef"))
typeof(x)
attributes(x)
x
#Datas e horas
x <- as.Date("1971-01-01")
x
unclass(x)
typeof(x)
attributes(x)
source("D:/GitHub/rDS/r4ds/rds_cap16_vetores.R", echo=TRUE)
#Data e hora
x <- ymd_hm("1970-01-01 01:00")
#Data e hora
x <- lubridate::ymd_hm("1970-01-01 01:00")
unclass(x)
typeof(x)
attributes(x)
x
attr(x, "tzone") <- "US/Pacific"
x
attr(x, "tzone") <- "America/Sao_Paulo"
x
y <- as.POSIXlt(x)
y
typeof(y)
attributes(y)
#Convertendo de volta de lt para data normal
lubridate::as_datetime(y)
#Convertendo de volta de lt para data normal
lubridate::as_date_time(y)
#Convertendo de volta de lt para data normal
lubridate::as_datetime(y)
##Tibbles
tb <- tibble::tibble(x = 1:5,
y = 5:1)
tb
typeof(tb)
attributes(tb)
##Data frame
df <- data.frame(x = 1:5,
y = 5:1)
df
typeof(df)
attributes(df)
#Function is C structure
#Analysis of a R function
f <- function() {}
typeof(f)
is.function(f)
#Analysis of a primitive function
typeof(sum)
is.function(sum)
is.primitive(sum)
is.primitive(f)
is.object(f)
is.object(sum)
library(pryr)
letters
df <- data.frame(x = 1:10, y = letters[1:10])
is.object(df)
isS4(df)
is.object(df) & !isS4(df)
otype(df)
otype(df$x)
otype(df$y)
mean
ftype(mean)
sum
ftype(sum)
cbind
ftype(cbind)
methods("mean")
methods("t.test")
#Creating S3 class
foo <- structure(list(), class = "foo")
cl <- list()
class(cl) <- "cl"
class(foo)
inherits(foo, "foo")
inherits(foo, "cl")
class(cl)
inherits(cl, "cl")
inherits(cl, "foo")
#Class constructor
foo <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(list(x), class = "foo")
}
#Methods and generic
f <- function(x) UseMethod("f")
f
f.a <- function(x) "Class a"
a <- structure(list(), class = "a")
class(a)
f(a)
mean.a <- function(x) "a"
mean(a)
#Method dispatch
f <- function(x) UseMethod("f")
f.a <- function(x) "Class a"
f.default <- function(x) "Unknown class"
#Using with a known class
f(structure(list(), class = "a"))
# No method for b class, so uses method for a class
f(structure(list(), class = c("b", "a")))
# No method for c class, so falls back to default
f(structure(list(), class = "c"))
serie <- structure(list(), class = "serie")
serie <- function(x) {
if (!is.numeric(x)) stop("The serie must be numeric")
structure(list(x), class = "serie")
}
s <- serie(c(1,2,3))
ns <- serie(c("a", "b", "c"))
media <- function(x) UseMethod("media")
source("D:/GitHub/rDS/r4ds/rds_cap16_extra_poo.R", echo=TRUE)
media <- function(x) UseMethod("media")
class(media)
#Example
serie <- structure(list(), class = "serie")
serie <- function(x) {
if (!is.numeric(x)) stop("The serie must be numeric")
structure(list(x), class = "serie")
}
s <- serie(c(1,2,3))
ns <- serie(c("a", "b", "c"))
media <- function(x) UseMethod("media")
class(media)
s
View(s)
class(s)
typeof(s)
