#Visualização dos melhores modelos (menor RMSE)
ggplot(sim1, aes(x,y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(models, aes(a1, a2)) +
geom_point(
size = 4, color = "red"
) +
geom_point(aes(colour = -dist))
ggplot(models, aes(a1, a2)) +
geom_point(
data = filter(models, rank(dist) <= 10),
size = 4, color = "red"
) +
geom_point(aes(colour = -dist))
#Busca em grade de modelos
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid
View(grid)
#Visualização de melhores modelos dentro do grid
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
datra = filter(grid, rank(dist) <= 10),
size = 4, colour = "red"
) +
geom_point(aes(color = -dist))
#Visualização de melhores modelos dentro do grid
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
data = filter(grid, rank(dist) <= 10),
size = 4, colour = "red"
) +
geom_point(aes(color = -dist))
#Visualização dos modelos gerados por grid
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, color = -dist),
data = filter(grid, rank(dist) <= 10)
)
#Otimização para encontrar modelo adequado
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
best
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2], color = "red")
best$par
#Modelagem usando ferramenta lm
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
sim1_mod$coefficients
sim1_mod$coefficients[1]
sim1_mod$coefficients[2]
coef(sim1_mod)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(sim1_mod)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(sim1_mod$coefficients[1], sim1_mod$coefficients[2])
lm
sim1_mod
sim1_mod$coefficients
sim1_mod$coefficients[1]
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_basico.R", echo=TRUE)
best$par
coef(sim1_mod)
?geom_abline
cf <- coef(sim1_mod)
cf
class(cf)
cf <- list(coef(sim1_mod))
cf
as.list(coef(sim1_mod))
cf <- as.list(coef(sim1_mod))
cf
cf$`(Intercept)`
cf[1]
cf[[1]]
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = as.list(coef(sim1_mod))[[1]],
slope = as.list(coef(sim1_mod))[[2]],
color = "blue")
library(tidyverse)
library(modelr)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
grid <- sim1 %>%
data_grid(x)
View(grid)
sim1_mod <- lm(y ~ x, data = sim1)
grid <- grid %>%
add_predictions(sim1_mod)
View(grid)
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_prev.R", echo=TRUE)
sim1
View(sim1)
View(grid)
View(grid)
#Visualização
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(
aes(y = pred),
data = grid,
color = "red",
size = 1
)
#Adicionando resíduos do modelo
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
#Visualização dos resíduos
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_prev.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_prev.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap18_modelos_prev.R", echo=TRUE)
#Bibliotecas e configuração NA
library(tidyverse)
library(modelr)
options(na.action = na.warn)
library(lubridate)
#Datasets
library(nycflights13)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr.R", echo=TRUE)
#Peso e quilates
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50)
#Transformações
diamonds2 <- diamonds %>%
#Menor ou igual a 2 quilates
filter(carat <= 2.5) %>%
#Mapamento de variáveis log de preço e quilates
mutate(lprice = log2(price), lcarat = log2(carat))
#Visualização com dataset transformado
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_hex(bins = 50)
#Modelagem
mod_diamonds <- lm(lprice ~ lcarat, data = diamonds2)
mod_diamonds
#Análise do modelo
grid <- diamonds2 %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
#Análise do modelo
grid <- diamonds2 %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamonds, "lprice") %>%
mutate(price = 2 ^ lprice)
grid
#Visualização das predições
ggplot(diamonds2, aes(carat, price)) +
geom_hex(bins = 50) +
geom_line(data = grid, color = "red", size = 1)
head(mpg)
ggplot(mpg, aes(hwy, disp)) +
geom_hex(bins = 10)
ggplot(mpg, aes(hwy, displ)) +
geom_hex(bins = 10)
ggplot(mpg, aes(hwy, displ)) +
geom_hex(bins = 50)
ggplot(mpg, aes(hwy, displ)) +
geom_hex(bins = 30)
ggplot(mpg, aes(hwy, displ)) +
geom_hex(bins = 20)
ggplot(mpg, aes(hwy, displ)) +
geom_hex(bins = 20)
mpg2
mpg
mpg2 <- mpg %>%
mutate(lhwy = log2(hwy), ldispl = log2(ldispl))
mpg2 <- mpg %>%
mutate(lhwy = log2(hwy), ldispl = log2(displ))
head(mpg2)
ggplot(mpg, aes(lhwy, ldispl)) +
geom_hex(bins = 20)
ggplot(mpg2, aes(lhwy, ldispl)) +
geom_hex(bins = 20)
?scale
mpg2 <- mpg %>%
mutate(lhwy = log2(hwy), ldispl = log2(displ),
zhwy = scale(hwy), zdispl = scale(displ))
head(mpg2)
View(mpg2)
ggplot(mpg2, aes(lhwy, ldispl)) +
geom_hex(bins = 20)
#Visualização com padronização z-score
ggplot(mpg2, aes(zhwy, zdispl)) +
geom_hex(bins = 20)
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr.R", echo=TRUE)
model <- lm(lhwy ~ ldispl, data = mp2)
model <- lm(lhwy ~ ldispl, data = mpg2)
model
grid_mpg <- mpg2 %>%
data_grid(displ = seq_range(displ, 20))
grid_mpg
grid_mpg <- mpg2 %>%
data_grid(displ = seq_range(displ, 20)) %>%
mutate(ldispl = log2(ldisp))
grid_mpg <- mpg2 %>%
data_grid(displ = seq_range(displ, 20)) %>%
mutate(ldispl = log2(disp))
grid_mpg <- mpg2 %>%
data_grid(displ = seq_range(displ, 20)) %>%
mutate(ldispl = log2(displ))
grid_mpg
grid_mpg <- mpg2 %>%
data_grid(displ = seq_range(displ, 20)) %>%
mutate(ldispl = log2(displ)) %>%
add_predictions(model, "lhwy")
grid_mpg
grid_mpg <- mpg2 %>%
data_grid(displ = seq_range(displ, 20)) %>%
mutate(ldispl = log2(displ)) %>%
add_predictions(model, "lhwy") %>%
mutate(hwy = 2 ^ lhwy)
grid_mpg
#Visualização das predições
ggplot(mpg2, aes(displ, hwy)) +
geom_hex(bins = 20) +
geom_line(data = grid_mpg, color = "red", size = 1)
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr.R", echo=TRUE)
diamonds2 <- diamonds2 %>%
add_residuals(mod_diamonds, "lresid")
ggplot(diamonds2, aes(lcaret, lresid)) +
geom_hex(bins = 50)
ggplot(diamonds2, aes(lcarat, lresid)) +
geom_hex(bins = 50)
ggplot(diamonds2, aes(cut, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(color, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, lresid)) + geom_boxplot()
#Adição de novas variáveis no modelo
mod_diamonds2 <- lm(
lprice ~ lcarat + color + cut + clarity,
data = diamonds2
)
mod_diamonds2
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamonds2)
grid
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamonds2) %>%
add_predictions(mod_diamonds2)
grid
ggplot(grid, aes(cut, pred)) +
geom_point()
diamonds2 <- diamonds2 %>%
add_residuals(mod_diamonds2, "lresid2")
ggplot(diamonds2, aes(lcarat, lresid2)) +
geom_hex(bins = 50)
#Valores incomuns
diamonds2 %>%
filter(abs(lresid2) > 1) %>%
add_predictions(mod_diamonds2) %>%
mutate(pred = round(2 ^ pred)) %>%
select(price, pred, carat::table, x:z) %>%
arrange(price)
install.packages("carat")
#Valores incomuns
diamonds2 %>%
filter(abs(lresid2) > 1) %>%
add_predictions(mod_diamonds2) %>%
mutate(pred = round(2 ^ pred)) %>%
select(price, pred, carat::table, x:z) %>%
arrange(price)
#Valores incomuns
diamonds2 %>%
filter(abs(lresid2) > 1) %>%
add_predictions(mod_diamonds2) %>%
mutate(pred = round(2 ^ pred)) %>%
select(price, pred, carat:table, x:z) %>%
arrange(price)
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr.R", echo=TRUE)
#Bibliotecas e configuração NA
library(tidyverse)
library(modelr)
options(na.action = na.warn)
library(lubridate)
#Datasets
library(nycflights13)
#Bibliotecas e configuração NA
library(tidyverse)
library(modelr)
options(na.action = na.warn)
library(lubridate)
#Datasets
library(nycflights13)
daily <- flights %>%
mutate(date = make_date(year, month, day)) %>%
group_by(date) %>%
summarize(n = n())
View(daily)
ggplot(daily, aes(data, n)) +
geom_line()
ggplot(daily, aes(date, n)) +
geom_line()
#Efeito dia da semana
daily <- daily %>%
mutate(wday = wday(date, label = TRUE))
ggplot(daily, aes(wday, n)) +
geom_boxplot()
#Modelar efeito do dia da semana
mod <- lm(n ~ wday, data = daily)
mod
grid <- daily %>%
data_grid(wday) %>%
add_predictions(mod, "n")
grid
ggplot(daily, aes(wday, n)) +
geom_boxplot() +
geom_point(data = grid, color = "red", size = 4)
ggplot(daily, aes(wday, n)) +
geom_boxplot() +
geom_point(data = grid, color = "red", size = 10, alpha = 1/5)
#Análise dos resíduos do modelo
daily <- daily %>%
add_residuals(mod)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line()
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0, color = "green") +
geom_line()
?geom_ref_line
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0, colour = "green") +
geom_line()
ggplot(daily, aes(date, resid, color = wday)) +
geom_ref_line(h = 0, colour = "green") +
geom_line()
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap19_modelos_constr_fli.R", echo=TRUE)
daily %>%
filter(resid < -100)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0, colour = "blue") +
geom_line(color = "grey50") +
geom_smooth(se = FALSE, span = 0.20)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0, colour = "red") +
geom_line(color = "grey50") +
geom_smooth(se = FALSE, span = 0.20)
#Efeito sazonal (sábados)
daily %>%
filter(wday == "Sat") %>%
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%b"
)
daily %>%
filter(wday == "Sat")
View(daily)
View(daily)
daily %>%
filter(wday == "sáb")
daily %>%
filter(wday == "sáb") %>%
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%b"
daily %>%
#Efeito sazonal (sábados)
daily %>%
filter(wday == "sáb") %>%
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
#date_labels = "%b"
)
#Efeito sazonal (sábados)
daily %>%
filter(wday == "sáb") %>%
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%a %b %d"
)
#Efeito sazonal (sábados)
daily %>%
filter(wday == "sáb") %>%
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%b %d"
)
#Efeito sazonal (sábados)
daily %>%
filter(wday == "sáb") %>%
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%b"
)
#Análise de efeito de períodos de férias
term <- function(date){
cut(date,
breaks = ymd(20130101, 20130605, 20130825, 20140101),
labels = c("spring", "summer", "fall")
)
}
daily <- daily %>%
mutate(term = term(date))
daily
View(daily)
daily %>%
filter(wday == "sáb") +
ggplot(aes(date, n, color = term)) +
geom_point(alpha = 1/3) +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%b"
)
daily %>%
filter(wday == "sáb") %>%
ggplot(aes(date, n, color = term)) +
geom_point(alpha = 1/3) +
geom_line() +
scale_x_date(
NULL,
date_breaks = "1 month",
date_labels = "%b"
)
#Analisar variável (período/term) com dias da semana
daily %>%
ggplot(aes(wday, n, color = term)) +
geom_boxplot()
#Comparar modelo com e sem influência de term
mod1 <- lm(n ~ wday, data = daily)
mod2 <- lm(n ~ wday * term, data = daily)
mod1
mod2
daily %>%
gather_residuals(without_term = mod1, with_term = mod2)
daily %>%
gather_residuals(without_term = mod1, with_term = mod2) %>%
ggplot(aes(date, resid, color = model)) +
geom_line(alpha = 0.75)
grid <- daily %>%
data_grid(wday, term) %>%
add_predictions(mod2, "n")
grid
ggplot(daily, aes(wday, n)) +
geom_boxplot() +
geom_point(data = grid, color = "red", size = 6, alpha = 0.8) +
facet_wrap(~ term)
ggplot(daily, aes(wday, n)) +
geom_boxplot() +
geom_point(data = grid, color = "red", size = 4, alpha = 0.8) +
facet_wrap(~ term)
#Criar modelo robusto a outliers
libray(MASS)
#Criar modelo robusto a outliers
library(MASS)
mod3 <- rlm(n ~ wday * term, data = daily)
daily %>%
add_residuals(mod2, "resid") %>%
ggplot(aes(date, resid)) +
geom_hline(yintercept = 0, size = 2, color = "green") +
geom_line()
