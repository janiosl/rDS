month_levels <- c(
"Jan", "Fev", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
#Criar um fator
y1 <- factor(x1, levels = month_levels)
y
y1
sort(y1)
#Criar um fator com algum valor inválid
y2 <- factor(x2, levels = month_levels)
y2
sort(y2)
#Verificar erros explicitamente
parse_factor(x2, levels = month_levels)
#Usar ordem original como levels
x3 <- c("AAA", "AA", "A",
"BBB", "BB", "B")
y3 <- factor(x3, levels = unique(x3))
y3
x4 <- c("A", "BB", "AAA", "B")
#Usar ordem original como levels
x3 <- c("AAA", "AA", "A",
"BBB", "BB", "B",
"A", "BB", "AAA", "B")
y3 <- factor(x3, levels = unique(x3))
y3
sort(y3)
library(tidyverse)
library(forcats)
#Dataset
gss_cat
?gss_cat
#Visualização
gss_cat %>%
count(race)
#Visualização
ggplot(gss_cat, aes(race)) +
geom_bar()
source("D:/GitHub/rDS/r4ds/cap12_estudoCaso.R", echo=TRUE)
#Adicionar níveis sem valores na visualização
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) #Evitar a eliminação de níveis vazios
View(gss_cat)
ggplot(gss_cat, aes(rincome)) +
geom_histogram()
ggplot(gss_cat, aes(rincome)) +
geom_bar()
ggplot(gss_cat, aes(rincome)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
ggplot(gss_cat, aes(rincome)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +
coord_flip()
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Categorias mais comuns
gss_cat %>%
count(relig)
#Categorias mais comuns
gss_cat %>%
desc(count(relig))
#Categorias mais comuns
gss_cat %>%
desc(relig)
#Categorias mais comuns
gss_cat %>%
count(relig, sort = TRUE)
gss_cat %>%
count(partyid, sort = TRUE)
gss_cat %>%
select(relig, denom)
ggplot(gss_cat, aes(relig, fill=denom))
ggplot(gss_cat, aes(relig, fill=denom)) +
geom_bar()
ggplot(gss_cat, aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom == "Episcopal")
gss_cat %>%
filter(denom == "Episcopal") %>%
select(relig, denom)
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom)
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom))
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
count(relig, sort = TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
gss_cat %>%
filter(denom != "Not applicable" | denom != "No answer") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom != "Not applicable" && denom != "No answer") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
gss_cat %>%
filter(denom != "Not applicable") %>%
select(relig, denom) %>%
ggplot(aes(relig, fill=denom)) +
geom_bar() +
coord_flip()
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Marital x tvhour
gss_cat %>%
select(marital, tvhours)
#Marital x tvhour
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours))
?mean
#Marital x tvhour
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
ggplot(aes(tvhour)) +
geom_bar()
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
ggplot(aes(marital)) +
geom_bar()
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
ggplot(aes(marital, tvhour)) +
geom_bar()
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE)) %>%
gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
mar_tv
ggplot(mar_tv, aes(tvhour)) +
geom_bar()
ggplot(mar_tv, aes(tvhour)) +
geom_bar()
ggplot(gss_cat, aes(tvhours)) +
geom_bar()
ggplot(mar_tv, aes(tvhour)) +
geom_bar()
ggplot(mar_tv, aes(marital)) +
geom_bar()
ggplot(mar_tv, aes(marital)) +
geom_bar(aes(y = ..prop..))
ggplot(mar_tv, aes(marital)) +
geom_bar(aes(y = ..prop.., group = 1))
ggplot(mar_tv) +
geom_bar(aes(marital, y = ..prop.., group = 1))
ggplot(mar_tv) +
geom_bar(aes(marital, y = ..prop.., group = 1),
stat = "identity")
ggplot(mar_tv) +
geom_bar(aes(marital, tvhour, group = 1),
stat = "identity")
ggplot(mar_tv) +
geom_bar(aes(marital, tvhour),
stat = "identity")
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
filter(marital != "No answer") %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
mar_tv
ggplot(mar_tv) +
geom_bar(aes(marital, tvhour),
stat = "identity")
?gss_cat
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
#Race x relig
gss_cat %>%
select(race, relig)
#Race x relig
gss_cat %>%
select(race, relig) %>%
group_by(race) %>%
summarize(n = n())
#Race x relig
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n())
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, fill = race))
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, fill = race),
stat = "identity")
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, race),
stat = "identity")
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(relig, fill=race))
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n()) %>%
ggplot() +
geom_bar(aes(race, fill=relig))
#Race x relig
gss_cat %>%
select(race, relig) %>%
group_by(race, relig) %>%
summarize(n = n())
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
library(tidyverse)
library(forcats)
relig <- gss_cat %>%
group_by(relig) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
relig
ggplot(relig, aes(tvhours, relig)) +
geom_point()
mar_tv
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
filter(marital != "No answer") %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE))
mar_tv
#Marital x tvhour
mar_tv <- gss_cat %>%
select(marital, tvhours) %>%
filter(marital != "No answer") %>%
group_by(marital) %>%
summarize(tvhour = mean(tvhours, na.rm = TRUE),
n = n())
mar_tv
ggplot(mar_tv, aes(marital, tvhour)) +
geom_point()
#Reoarnando fatores para visualização
ggplot(relig, aes(tvhours, fct_reorder(relig, tvhours))) +
geom_point()
ggplot(mar_tv, aes(fct_reorger(marital, tvhour), tvhour)) +
geom_point()
ggplot(mar_tv, aes(fct_reorder(marital, tvhour), tvhour)) +
geom_point()
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
ggplot(mar_tv) +
geom_bar(aes(fct_reorder(marital, tvhour), tvhour),
stat = "identity")
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
#Reordenando fora da visualização para melhor organização
relig %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
#Ajustar nível específico
rincome <- gss_cat %>%
group_by(rincome) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome
ggplot(rincome,
aes(age, rincome)) +
geom_point()
aes(age, fct_relevel(rincome, "Not applicable")) +
geom_point()
#Ajustada posição de não aplicável
ggplot(rincome,
aes(age, fct_relevel(rincome, "Not applicable"))) +
geom_point()
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_estudoCaso.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
by_age
ggplot(by_age,
aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
source("D:/GitHub/rDS/r4ds/rds_cap12_factor_ajustes.R", echo=TRUE)
View(by_age)
ggplot(by_age,
aes(age, prop, color = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(color = "marital")
by_age <- gss_cat %>%
filter(!is.na(age))
gss_cat %>%
filter(!is.na(age))
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count()
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
by_age
sum(by_age$n)
by_age[]
by_age[1,]
by_age[1,]$n
by_age[1,]$n/sum(by_age$n)
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n/sum(n))
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar()
##=====================================
##Modificar níveis
##=====================================
gss_cat %>% count(partyid)
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind, near rep",
"Independent, near dem" = "Ind, near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat"
)) %>%
count(partyid)
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat"
)) %>%
count(partyid)
#Recombinar grupos de níveis
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "Not answer",
"Other" = "Don't know",
"Other" = "Other party"
)) %>%
count(partyid)
#Recombinar grupos de níveis
gss_cat %>%
mutate(
partyid = fct_recode(
partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "No answer",
"Other" = "Don't know",
"Other" = "Other party"
)) %>%
count(partyid)
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
))
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
))
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
))
#Agrupar diversos níveis
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer","Don't know","Other party"),
rep = c("Strong republican","Not str republican"),
dem = c("Not str democrat","Strong democrat"),
ind = c("Ind,near rep","Ind,near dem")
)) %>%
count(partyid)
#Agrupar todos os níveis pequenos
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
#Agrupar sem "excesso" definindo quantidade de grupos
gss_cat %>%
mutate(relig = fct_lump(relig, n = 5)) %>% #n define grupos
count(relig, sort = TRUE) %>% #sort ordena o resultado
print(n = Inf) #Inf permite visualizar todos os grupos do resultado
#Agrupar sem "excesso" definindo quantidade de grupos
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>% #n define grupos
count(relig, sort = TRUE) %>% #sort ordena o resultado
print(n = Inf) #Inf permite visualizar todos os grupos do resultado
#Agrupar sem "excesso" definindo quantidade de grupos
gss_cat %>%
mutate(relig = fct_lump(relig, n = 3)) %>% #n define grupos
count(relig, sort = TRUE) %>% #sort ordena o resultado
print(n = Inf) #Inf permite visualizar todos os grupos do resultado
install.packages("lubridate")
#install.packages("lubridate")
library(tidyverse)
library(lubridate)
library(nycflights13)
#Verificando tempos
today()
now() #Data e hora
#Lendo datas a partir de strings
ymd("2017-01-31")
source("D:/GitHub/rDS/r4ds/rds_cap13_datas_lubridate.R", echo=TRUE)
mdy("January 31st, 2017")
dmy("31-Jan-2017")
#Lendo datas a partir de números
ymd(20170131)
#Datas e horas
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
ymd(20170131, tz="UTC")
flights %>%
select(year, month, day, hour, minute)
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_date(year, month, day))
